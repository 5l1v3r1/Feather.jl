{
    "docs": [
        {
            "location": "/", 
            "text": "Feather.jl Documentation\n\n\nFeather.jl\n provides a pure Julia library for reading and writing feather-formatted binary files, an efficient on-disk representation of a \nDataFrame\n.\n\n\nFor more info on the feather and related Arrow projects see the links below:\n\n\n\n\nfeather: \nhttps://github.com/wesm/feather\n\n\n\n\nArrow: \nhttps://arrow.apache.org/\n\n\n\n\n\n\nFeather.jl Documentation\n\n\n\n\nHigh-level interface\n\n\n\n\n\n\n\n\n\n\nHigh-level interface\n\n\n#\n\n\nFeather.read\n \n \nFunction\n.\n\n\nFeather.read{T \n: Data.Sink}(file, sink_type::Type{T}, sink_args...)\n =\n \nT\n \nFeather.read(file, sink::Data.Sink)\n =\n \nData.Sink\n\n\nFeather.read\n takes a feather-formatted binary \nfile\n argument and \"streams\" the data to the provided \nsink\n argument. A fully constructed \nsink\n can be provided as the 2nd argument (the 2nd method above), or a Sink can be constructed \"on the fly\" by providing the type of Sink and any necessary positional arguments (the 1st method above). By default, a \nDataFrame\n is returned.\n\n\nExamples:\n\n\n# default read method, returns a DataFrame\ndf = Feather.read(\ncool_feather_file.feather\n)\n\n# read a feather file directly into a SQLite database table\ndb = SQLite.DB()\nFeather.read(\ncool_feather_file.feather\n, SQLite.Sink, db, \ncool_feather_table\n)\n\n\n\n\nsource\n\n\n#\n\n\nFeather.write\n \n \nFunction\n.\n\n\nFeather.write{T \n: Data.Source}(io, source::Type{T}, source_args...)\n =\n \nFeather.Sink\n \nFeather.write(io, source::Data.Source)\n =\n \nFeather.Sink\n\n\nWrite a \nData.Source\n out to disk as a feather-formatted binary file. The two methods allow the passing of a fully constructed \nData.Source\n (2nd method), or the type of Source and any necessary positional arguments (1st method).\n\n\nExamples:\n\n\ndf = DataFrame(...)\nFeather.write(\nshiny_new_feather_file.feather\n, df)\n\nFeather.write(\nsqlite_query_result.feather\n, SQLite.Source, \nselect * from cool_table\n)\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#featherjl-documentation", 
            "text": "Feather.jl  provides a pure Julia library for reading and writing feather-formatted binary files, an efficient on-disk representation of a  DataFrame .  For more info on the feather and related Arrow projects see the links below:   feather:  https://github.com/wesm/feather   Arrow:  https://arrow.apache.org/    Feather.jl Documentation   High-level interface", 
            "title": "Feather.jl Documentation"
        }, 
        {
            "location": "/#high-level-interface", 
            "text": "#  Feather.read     Function .  Feather.read{T  : Data.Sink}(file, sink_type::Type{T}, sink_args...)  =   T   Feather.read(file, sink::Data.Sink)  =   Data.Sink  Feather.read  takes a feather-formatted binary  file  argument and \"streams\" the data to the provided  sink  argument. A fully constructed  sink  can be provided as the 2nd argument (the 2nd method above), or a Sink can be constructed \"on the fly\" by providing the type of Sink and any necessary positional arguments (the 1st method above). By default, a  DataFrame  is returned.  Examples:  # default read method, returns a DataFrame\ndf = Feather.read( cool_feather_file.feather )\n\n# read a feather file directly into a SQLite database table\ndb = SQLite.DB()\nFeather.read( cool_feather_file.feather , SQLite.Sink, db,  cool_feather_table )  source  #  Feather.write     Function .  Feather.write{T  : Data.Source}(io, source::Type{T}, source_args...)  =   Feather.Sink   Feather.write(io, source::Data.Source)  =   Feather.Sink  Write a  Data.Source  out to disk as a feather-formatted binary file. The two methods allow the passing of a fully constructed  Data.Source  (2nd method), or the type of Source and any necessary positional arguments (1st method).  Examples:  df = DataFrame(...)\nFeather.write( shiny_new_feather_file.feather , df)\n\nFeather.write( sqlite_query_result.feather , SQLite.Source,  select * from cool_table )  source", 
            "title": "High-level interface"
        }
    ]
}